#ifndef ROHAN_DEVICE_H
#define ROHAN_DEVICE_H
#include "cublas.h"

//typedef struct rdLayer /// layer structure for use in device memory
//{
//	void * * devMem /*! storage location of root in device memory */;
//	long iNeuronQty /*! # neurons hosted on this layer; 1-based, but neuron zero is wholly virtual */;
//	long iDendriteQty /*! # neurons or inputs on previous layer; 1-based, with virtual signal source zero */;
//	
//	cuDoubleComplex *Weights /*! 2D neuron cx weight matrix on GPU */;
//	cuDoubleComplex *ZOutputs /*! 1D layer's cx weighted sums/activated signals on GPU */;
//	cuDoubleComplex *Deltas /*! 1D cx error correction values per neuron on GPU */;
//	cuDoubleComplex *gpuUnWeights /*! a reversed matrix of neuron weights for the distribution and accumulation of error figures on GPU */;
//} rdLayer;

typedef struct rdNetwork /// network structure for use in device memory
{
	void * * devMem /*! storage location of root in device memory */;
	long iSectorQty;
	long iLayerQty;
	long iWeightMode;
	double dK_DIV_TWO_PI;
	double two_pi_div_sect_qty;
	cuDoubleComplex *gpuSectorBdry;
	rohanLayer *rLayer;
	rohanLayer *gpuLayer;
	//char* sWeightSet;
	//FILE* fileInput;
	
} rdNetwork;

//struct rdSample
//{							
//	cuDoubleComplex *gpuXInputs /*! 1D complex input tuple in GPU. */;
//	cuDoubleComplex *gpuDOutputs/*! desired  complex output(s) in GPU. */;
//	cuDoubleComplex *gpuTOutputs /*! desired real outputs in GPU, .x only is used */;
//	cuDoubleComplex *gpuYEval /*! 1BA, final cx outputs generated by alt method. Never  discrete. */;
//	cuDoubleComplex *gpudYEval /*! generated scalar outputs in GPU, .x only is used. Activated. */;
//};

struct rdLearningSet /*! Learning sets contain a short preamble of parameters followed by delimited data */
{
	void * * devMem /*! storage location of root in device memory */;
	long iEvalMode /*! Defaults to discrete outputs but a value of 0 denotes Continuous outputs. */;
	long lSampleQty /*! # samples to be read from the learning set file; defaults to # samples found*/;
	long iInputQty /*! # inputs are per line; defaults to the number of values per line, minus the number of outputs, read from left to right. See bRInJMode. */;
	long iOutputQty /*! # outputs are per line; defaults to 1. Read from left to right among the rightmost columns. */;
	long iContOutputs /*! Outputs have decimals. */;
	long lSampleIdxReq /*! index of sample currently or last under consideration. */;
	/// dev space arrays added 9/20/2011 to accommodate cDevTeam
	cuDoubleComplex *gpuXInputs   /*! 2D complex input tuples in GPU. */ ;
	cuDoubleComplex *gpuDOutputs  /*! 2D desired complex outputs in GPU. */ ;
	cuDoubleComplex *gpuYEval /*! 1BA, final yielded cx outputs. Never discrete. */;
	cuDoubleComplex *gpuAltYEval /*! 1BA, final cx outputs generated by alt method. Never discrete. */;
	double *gpudXInputs /*! 1BA, learnable real tuples on GPU. */;
	double *gpudDOutputs /*! 1BA, desired real ouputs on GPU. */;
	double *gpudYEval /*! generated scalar outputs in GPU. Activated. */;
	double *gpudAltYEval /*! generated scalar outputs in GPU by alternate method. Activated. */;
	double *gpudSE1024 /* array for intermediate RMSE totals */ ;

};

struct rdContext
{
	void * * devMem /*! storage location of root in device memory */;
	long iDebugLvl, iEvalMode, iWarnings, iErrors;
	long bRMSEon /*! diables RMSE tracking for classification problems. XX */;
	double dMAX /*! Maximum allowable error in sample output reproduction without flagging for backprop learning. */;
	double dRMSE /*! The evaluated Root Mean Square Error over the working sample subset, equivalent to the standard deviation or sigma. */;
	double dTargRMSE /*! Acceptable RMSE value for stopping learninig when achieved. */;
	long iEpochLength /*! iterations per epoch; learning will pause to check once per epoch for further input */;
	long lSampleQtyReq /*! Size of requested working subset of samples, counted from the top. */;
	long lSamplesTrainable /*! Number of samples that exceed dMAX criterion. */;
	struct rdNetwork * rNet /*! Active network currently in use for session. */;
	struct rdLearningSet * rLearn /*! Active learning set currently in use for session. */;
	//class cDeviceTeam * ctDraftTeam /*! The calculating "engine" currently in use. */;
} ;

/*! end redundant include protection */
#endif